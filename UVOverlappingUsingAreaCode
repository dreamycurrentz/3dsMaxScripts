fn hasUVWUnwrapModifier obj =
(
	(classOf obj.modifiers[obj.modifiers.count] == Unwrap_UVW)
)


fn enterTotalArray currElementFaceIndex nextElementFaceIndex = 
(
	local isOverlapping = false
	
	local tempCombinedArray = elementFacesArray[currElementFaceIndex] + elementFacesArray[nextElementFaceIndex]
	
	for i = 1 to totalOverlappedFacesArray.count do
	(
		if (tempCombinedArray * totalOverlappedFacesArray[i]).isEmpty == false then
		(
			totalOverlappedFacesArray[i] += tempCombinedArray
			isOverlapping = true
			break
		)
	)

	if not isOverlapping do
	(
		append totalOverlappedFacesArray tempCombinedArray
	)
)

fn getElementFacesArray obj selectedFaces =
(
	local numfaces = polyOp.getNumFaces obj
	local polyOp_getElementsUsingFace = polyOp.getElementsUsingFace
	
	for f = 1 to numFaces where selectedFaces[f] do
	(
		local elementFaces = polyOp_getElementsUsingFace obj f
		selectedFaces -= elementFaces
		append elementFacesArray elementFaces
	)
)

fn traverseEdgeElement currElementEdges nextElementEdges = 
(
	for currEdge in currElementEdges do
	(
		for nextEdge in nextElementEdges do
		(
			if (checkIntersection currEdge nextEdge) then 1
		)
	)
	0
)

fn doesVertIntersect currElementVertMinMax nextElementVertMinMax = 
(
	currMinX = currElementVertMinMax[1]
	currMinY = currElementVertMinMax[2]
	currMaxX = currElementVertMinMax[3]
	currMaxY = currElementVertMinMax[4]
	
	nextMinX = nextElementVertMinMax[1]
	nextMinY = nextElementVertMinMax[2]
	nextMaxX = nextElementVertMinMax[3]
	nextMaxY = nextElementVertMinMax[4]
	
	xOverlap = (currMaxX >= nextMinX) and (currMinX <= nextMaxX)
	yOverlap = (currMaxY >= nextMinY) and (currMinY <= nextMaxY)
	
	return (xOverlap and yOverlap)
)

totalOverlappedFacesArray = #()
elementFacesArray = #()
elementEdgesArray = #()
edgeToVerts = #()
vertToVertPosition = #()

with undo off
(
	with redraw off
	(
		max create mode
		
		selectedObj = selection as array
		
		if (selectedObj.count == 1) and (classOf selectedObj[1].baseObject == Editable_Poly)  do
		(
			mainObj = selectedObj[1]
			
			local unwrapMod =  mainObj.modifiers[mainObj.modifiers.count]
			local selectedFaces = unwrapMod.getSelectedFaces()
			
			if (hasUVWUnwrapModifier mainObj) then
			(
				
				obj = copy mainObj
				ChannelInfo.CopyChannel obj 3 1
				ChannelInfo.PasteChannel obj 1 1
				ResetXForm obj
				convertToMesh obj
				convertToPoly obj
				
				start = timeStamp()
				
				numFaces = polyOp.getNumFaces obj
				
				/* --------------------
				--Pre-Fetch values
				-------------------- */
				
				-- Get Element Faces in an Array
				local numfaces = polyOp.getNumFaces obj
				local polyOp_getElementsUsingFace = polyOp.getElementsUsingFace
				
				for f = 1 to numFaces where selectedFaces[f] do
				(
					local elementFaces = polyOp_getElementsUsingFace obj f
					selectedFaces -= elementFaces
					append elementFacesArray elementFaces
				)
				format "Element faces array: %\n" elementFacesArray
				
				-- Get Vert To VertPosition Array
-- 				numVerts = polyop.getNumVerts obj
-- 				polyop_getVert = polyop.getVert
-- 				vertToVertPosition = (for vert = 1 to numVerts collect polyop_getVert obj vert)
-- 				format "vertToVertPosition: %\n" vertToVertPosition
				
				-- Get Vert using Face by traversing elementFacesArray
-- 				polyop_getVertsUsingFace = polyop.getVertsUsingFace
-- 				elementFacesArrayCount = elementFacesArray.count
-- 				faceElemVerts = for index = 1 to elementFacesArrayCount collect
-- 				(
-- 					polyop_getVertsUsingFace obj elementFacesArray[index]
-- 				)
-- 				format "faceElemVerts: %\n" faceElemVerts
				
				
				local unwrapModMain =  mainObj.modifiers[mainObj.modifiers.count]
				x = 0
				y = 0
				width = 0
				height = 0
				areaUVW = 011
				areaGeom = 0
				
				local minMaxData = #()
				
				minMaxData = for i = 1 to elementFacesArray.count collect
				(
					unwrapModMain.getArea elementFacesArray[i] &x &y &width &height &areaUVW &areaGeom
					#(x, y, width, height)
				)
				format "\nMinMax Data: %" minMaxData
				a = 0
				
				for i = 1 to minMaxData.count do
				(
					x1 = minMaxData[i][1]
					y1 = minMaxData[i][2]
					width1 = minMaxData[i][3]
					height1 = minMaxData[i][4]
					right1 = x1 + width1
					bottom1 = y1 + height1
					
					for j = i + 1 to minMaxData.count do
					(
						x2 = minMaxData[j][1]
						y2 = minMaxData[j][2]
						width2 = minMaxData[j][3]
						height2 = minMaxData[j][4]
						right2 = x2 + width2
						bottom2 = y2 + height2
						
-- 						if ((right1 > x2) and (x1 < right2) and (bottom1 > y2) and (y1 < bottom2)) do
-- 							a = 1
-- 							enterTotalArray i j
						
-- 						horizontalOverlap = ((x1 + width1) > x2) and (x1 < (x2 + width2))
-- 						verticalOverlap = ((y1 + height1) > y2) and (y1 < (y2 + height2))
						
-- 						if (horizontalOverlap and verticalOverlap) do
-- 							enterTotalArray i j
					)
				)
				
				format "\nTotal overlapped array: %" totalOverlappedFacesArray
				
-- 				format "MinMaxData: %" minMaxData
				/* --------------------
				--Calculate minMaxVertList based on ElementFacesArray
				-------------------- */
				
-- 				minMaxVertsList = #()
-- 				minMaxVertsList[elementFacesArrayCount] = 0
-- 				
-- 				local minX, minY, maxX, maxY, px, py
				
-- 				progressStart "Starting progress..."
				
-- 				for index = 1 to faceElemVerts.count do
-- 				(	
-- 					minX = 1e9; minY = 1e9
-- 					maxX = -1e9; maxY = -1e9
-- 					
-- 					progressUpdate ((index as float / faceElemVerts.count) * 100)
-- 					
-- 					for v in faceElemVerts[index] do
-- 						(
-- 							px = vertToVertPosition[v].x
-- 							py = vertToVertPosition[v].y

-- 							if px < minX do minX = px
-- 							if px > maxX do maxX = px
-- 							if py < minY do minY = py
-- 							if py > maxY do maxY = py
-- 						)
-- 					
-- 					minMaxVertsList[index] = #(minX, minY, maxX, maxY)
-- 				)
				
-- 				progressEnd()
-- 				format "\nminMaxVertsList: %\n" minMaxVertsList
				
				
				/* --------------------
				--Traversing minMaxVertList to find the intersection
				-------------------- */

-- 				boolFlag = false
-- 				
-- 				for i = 1 to minMaxVertsList.count do
-- 				(
-- 					for j = i + 1 to minMaxVertsList.count where i != j do
-- 					(
-- 						if (doesVertIntersect minMaxVertsList[i] minMaxVertsList[j]) do 
-- 						(
-- 							enterTotalArray i j
-- 						)
-- 					)
-- 				)
-- 				
-- 				format "\nTotal overlapped array: %" totalOverlappedFacesArray
-- 				delete obj

				/* --------------------
				--Assign groups for overlapped faces by traversing totalOverlappedFacesArray
				-------------------- */
				
-- 				unwrapMod.setTVSubObjectMode 3
-- 				unwrapMod.selectFaces #{}
-- 				
-- 				for i = 1 to totalOverlappedFacesArray.count do
-- 				(
-- 					local currFaceSelection = totalOverlappedFacesArray[i]
-- 					unwrapMod.selectFaces currFaceSelection
-- 					unwrapMod.GroupCreateBySelection()
-- 					unwrapMod.selectFaces #{}
-- 				)
			
				end = timeStamp()
				format "\nProcessing took % seconds\n" ((end - start) / 1000.0)
			)
		)
	)
)
max modify mode




/* Extra code - TESTING

-- 				Edge Edge intersection

fn edgeElement currEdgeElement nextEdgeElement = 
(
-- 	format "\ncurrEdgeElement: %, nextEdgeElement: %" currEdgeElement nextEdgeElement

	for i = 1 to currEdgeElement.count do
	(
		for j = 1 to nextEdgeElement.count do
		(
			intersection = doesEdgeIntersect currEdgeElement[i] nextEdgeElement[j]
		)
	)
)

fn checkIntersection currEdge nextEdge =
(

-- 	format "currEdge: %\n" currEdge
-- 	format "nextEdge: %\n" nextEdge
-- 	format "edgeToVerts: %\n" edgeToVerts[currEdge]
	
	-- Cache vertex positions for the current edge
	currEdgeVertsPos = edgeToVerts[currEdge]
	nextEdgeVertsPos = edgeToVerts[nextEdge]
	
	-- Extract x, y coordinates
	x1 = vertToVertPosition[currEdgeVertsPos[1]].x
	y1 = vertToVertPosition[currEdgeVertsPos[1]].y
	x2 = vertToVertPosition[currEdgeVertsPos[2]].x
	y2 = vertToVertPosition[currEdgeVertsPos[2]].y
	
	x3 = vertToVertPosition[nextEdgeVertsPos[1]].x
	y3 = vertToVertPosition[nextEdgeVertsPos[1]].y
	x4 = vertToVertPosition[nextEdgeVertsPos[2]].x
	y4 = vertToVertPosition[nextEdgeVertsPos[2]].y
	
	
	-- Prefetch calculations
	diff1 = y1 - y3
	diff2 = x1 - x3
	diff3 = x1 - x2
	diff4 = y3 - y4
	diff5 = y1 - y2
	diff6 = x3 - x4
	
	-- Compute denominator
	denom = (diff3) * (diff4) - (diff5) * (diff6)
	
	-- Calculate t and u
	t = (((diff2)*(diff4)) - ((diff1)*(diff6))) / denom
	u = -(((diff3)*(diff1)) - ((diff5)*(diff2))) / denom
	
	-- Intersection condition	
	if ((0 <= t and t <= 1) and (0 <= u and u <= 1)) then
	(
		return true
	)
	else
	(
		return false
	)
)

				-- Get Element Edges in an Array
-- 				polyop_getEdgesUsingFace = polyop.getEdgesUsingFace
-- 				for singleElem in elementFacesArray do
-- 				(
-- 					append elementEdgesArray (polyop_getEdgesUsingFace obj singleElem)
-- 				)
-- 				format "Element edges array: %\n" elementEdgesArray

				-- Get Edge to Verts Array
				numEdges = polyop.getNumEdges obj
				edgeToVerts = polyop.getEdgesVerts obj #{1..numEdges}
-- 				format "edgeToVerts: %\n" edgeToVerts

-- 				doesEdgesIntersectBool = false
-- 				for i = 1 to elementEdgesArray.count do
-- 				(
-- 					for j = i + 1 to elementEdgesArray.count where i != j do
-- 					(
-- 						doesEdgesIntersectBool = traverseEdgeElement elementEdgesArray[i] elementEdgesArray[j]
						
-- 						if (doesEdgesIntersectBool == true) do
-- 						(
-- 							format "\nEdge % and % intersects" elementEdgesArray[i] elementEdgesArray[j]
-- 						)
-- 					)
-- 				)

*/