fn hasUVWUnwrapModifier obj =
(
	(classOf obj.modifiers[obj.modifiers.count] == Unwrap_UVW)
)


fn enterTotalArray currElementFaceIndex nextElementFaceIndex = 
(
	local isOverlapping = false
	
	local tempCombinedArray = elementFacesArray[currElementFaceIndex] + elementFacesArray[nextElementFaceIndex]
	
	for i = 1 to totalOverlappedFacesArray.count do
	(
		if (tempCombinedArray * totalOverlappedFacesArray[i]).isEmpty == false then
		(
			totalOverlappedFacesArray[i] += tempCombinedArray
			isOverlapping = true
			break
		)
	)

	if not isOverlapping do
	(
		append totalOverlappedFacesArray tempCombinedArray
	)
)

fn getElementFacesArray obj selectedFaces =
(
	local numfaces = polyOp.getNumFaces obj
	local polyOp_getElementsUsingFace = polyOp.getElementsUsingFace
	
	for f = 1 to numFaces where selectedFaces[f] do
	(
		local elementFaces = polyOp_getElementsUsingFace obj f
		selectedFaces -= elementFaces
		append elementFacesArray elementFaces
	)
)

fn traverseEdgeElement currElementEdges nextElementEdges = 
(
	for currEdge in currElementEdges do
	(
		for nextEdge in nextElementEdges do
		(
			if (checkIntersection currEdge nextEdge) then 1
		)
	)
	0
)

fn doesVertIntersect currElementVertMinMax nextElementVertMinMax = 
(
	currMinX = currElementVertMinMax[1]
	currMinY = currElementVertMinMax[2]
	currMaxX = currElementVertMinMax[3]
	currMaxY = currElementVertMinMax[4]
	
	nextMinX = nextElementVertMinMax[1]
	nextMinY = nextElementVertMinMax[2]
	nextMaxX = nextElementVertMinMax[3]
	nextMaxY = nextElementVertMinMax[4]
	
	xOverlap = (currMaxX >= nextMinX) and (currMinX <= nextMaxX)
	yOverlap = (currMaxY >= nextMinY) and (currMinY <= nextMaxY)
	
	return (xOverlap and yOverlap)
)

totalOverlappedFacesArray = #()
elementFacesArray = #()
elementEdgesArray = #()
edgeToVerts = #()
vertToVertPosition = #()

with undo off
(
	with redraw off
	(
		max create mode
		
		selectedObj = selection as array
		
		if (selectedObj.count == 1) and (classOf selectedObj[1].baseObject == Editable_Poly)  do
		(
			mainObj = selectedObj[1]
			
			local unwrapMod =  mainObj.modifiers[mainObj.modifiers.count]
			local selectedFaces = unwrapMod.getSelectedFaces()
			
			if (hasUVWUnwrapModifier mainObj) then
			(
				
				obj = copy mainObj
				ChannelInfo.CopyChannel obj 3 1
				ChannelInfo.PasteChannel obj 1 1
				ResetXForm obj
				convertToMesh obj
				convertToPoly obj
				
				start = timeStamp()
				
				numFaces = polyOp.getNumFaces obj
				
				/* --------------------
				--Pre-Fetch values
				-------------------- */
				
				-- Get Element Faces in an Array
				local numfaces = polyOp.getNumFaces obj
				local polyOp_getElementsUsingFace = polyOp.getElementsUsingFace
				
				for f = 1 to numFaces where selectedFaces[f] do
				(
					local elementFaces = polyOp_getElementsUsingFace obj f
					selectedFaces -= elementFaces
					append elementFacesArray elementFaces
				)
				format "Element faces array: %\n" elementFacesArray
				
				-- Get Vert To VertPosition Array
				numVerts = polyop.getNumVerts obj
				polyop_getVert = polyop.getVert
				vertToVertPosition = (for vert = 1 to numVerts collect polyop_getVert obj vert)
				format "vertToVertPosition: %\n" vertToVertPosition
				
				-- Get Vert using Face by traversing elementFacesArray
				polyop_getVertsUsingFace = polyop.getVertsUsingFace
				elementFacesArrayCount = elementFacesArray.count
				faceElemVerts = for index = 1 to elementFacesArrayCount collect
				(
					polyop_getVertsUsingFace obj elementFacesArray[index]
				)
				format "faceElemVerts: %\n" faceElemVerts
				
				
				/* --------------------
				--Calculate minMaxVertList based on ElementFacesArray
				-------------------- */
				
				minMaxVertsList = #()
				minMaxVertsList[elementFacesArrayCount] = 0
				
				for index = 1 to faceElemVerts.count do
				(
					minX = 1e9; minY = 1e9
					maxX = -1e9; maxY = -1e9
					
					for v in faceElemVerts[index] do
					(
						local px = vertToVertPosition[v].x
						local py = vertToVertPosition[v].y

						if px < minX then minX = px
						if px > maxX then maxX = px
						if py < minY then minY = py
						if py > maxY then maxY = py
					)
					minMaxVertsList[index] = #(minX, minY, maxX, maxY)
				)
-- 				format "\nminMaxVertsList: %\n" minMaxVertsList
				
				
				/* --------------------
				--Traversing minMaxVertList to find the intersection
				-------------------- */

				boolFlag = false
				
				for i = 1 to minMaxVertsList.count do
				(
					for j = i + 1 to minMaxVertsList.count where i != j do
					(
						if (doesVertIntersect minMaxVertsList[i] minMaxVertsList[j]) do 
						(
							enterTotalArray i j
						)
					)
				)
				
				format "\nTotal overlapped array: %" totalOverlappedFacesArray
				delete obj

				/* --------------------
				--Assign groups for overlapped faces by traversing totalOverlappedFacesArray
				-------------------- */
				
				unwrapMod.setTVSubObjectMode 3
				unwrapMod.selectFaces #{}
				
				for i = 1 to totalOverlappedFacesArray.count do
				(
					local currFaceSelection = totalOverlappedFacesArray[i]
					unwrapMod.selectFaces currFaceSelection
					unwrapMod.GroupCreateBySelection()
					unwrapMod.selectFaces #{}
				)
			
				end = timeStamp()
				format "\nProcessing took % seconds\n" ((end - start) / 1000.0)
			)
		)
	)
)
max modify mode
